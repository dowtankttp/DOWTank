@model DOWTank.Models.UserSecurityProfileViewModel
@{
    ViewBag.Title = "Edit User Profile";
}

<div class="well well-lg">
    <!--title-->
    <div class="row">
        <div class="col-md-12 nopadding">
            @if (Model.Id == 0)
            {
                <h4 class="dow-color col-md-6">Add User Profile</h4>
            }
            else
            {
                <h4 class="dow-color col-md-6">Edit User Profile</h4>
            }
        </div>
    </div>
    @using (Html.BeginForm("SecurityProfile", "Admin", FormMethod.Post))
    {
        if (ViewData.ModelState.Keys.Any(k => ViewData.ModelState[k].Errors.Count() > 0))
        {
        <div class="alert alert-danger">
            <button class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
            @Html.ValidationSummary(false, "Please correct the following items: ")
        </div>
        }
        <div class="form-group text-right">
            <input type="submit" value="Save Profile" class="btn btn-default btn-primary mr10" />
            @Html.ActionLink("Return To List", "UserProfile", "Admin", null, new { @class = "btn btn-default btn-primary" })
        </div>
        @Html.HiddenFor(m => m.Id)
        <div class="form-group">
            <div class="row">
                <div class="col-md-6">
                    <label>Profile Name #:*</label>
                    @Html.TextBoxFor(m => m.ProfileName, new { @class = "form-control" })
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-12 nopadding">
                <label>Active:</label>
            </div>
            <div class="row no-row-margin">
                <div class="col-md-1 nopadding">
                    <div class="radio">
                        <label>
                            @Html.RadioButtonFor(m => m.IsActive, true)
                            Yes
                        </label>
                    </div>
                </div>
                <div class="col-md-1 nopadding">
                    <div class="radio">
                        <label>
                            @Html.RadioButtonFor(m => m.IsActive, false)
                            No
                        </label>
                    </div>
                </div>
            </div>
        </div>
        
        //Dashboard Menu
        <div class="form-group">
            <div class="row">
                <div class="row no-row-margin">
                    <div class="col-md-12">
                        <div class="checkbox">
                            <label class="control-label">
                                <input type="checkbox" name="chkbxDashboardMenu" id="chkbxDashboardMenu">
                                <b>Dashboard Menu</b>
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row">
                <div class="col-md-12">
                    <span>Note: Options in this category are used to govern page level security as well as dashboard menu options. IE: In order to DISPATCH or PREP from anywhere in the system, the appropriate privilege must also be checked here.
                    </span>
                    <div class="row no-row-margin">
                        @for (int i = 0; i < Model.DashboardMenu.Count; i++)
                        {
                            var dashboardName = "DashboardMenu[" + i + "].PrivilegeID";
                            <div class="col-md-12 no-padding">
                                <div class="checkbox">
                                    <label>
                                        @Html.HiddenFor(m => m.DashboardMenu[i].PrivilegeDS)
                                        <input type="checkbox" value="@Model.DashboardMenu[i].PrivilegeID" id="@Model.DashboardMenu[i].PrivilegeID"   name="@dashboardName"  @if (@Model.DashboardMenu[i].GrantedFL == 1)
                                                                                                                                                                             { <text>checked='checked'</text> }>
                                        @Model.DashboardMenu[i].PrivilegeDS
                                    </label>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        
                        //Dashboard list
        <div class="form-group">
            <div class="row">
                <div class="col-md-12">
                    <div class="checkbox">
                        <label class="control-label">
                            <input type="checkbox" name="chkbxDashboardList" id="chkbxDashboardList">
                            <b>Dashboard List</b>
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row">
                @for (int i = 0; i < Model.DashboardList.Count; i++)
                {
                    var dashboardName = "DashboardList[" + i + "].PrivilegeID";
                    <div class="col-md-12">
                        <div class="checkbox">
                            <label>
                                @Html.HiddenFor(m => m.DashboardList[i].PrivilegeDS)
                                <input type="checkbox" value="@Model.DashboardList[i].PrivilegeID" id="@Model.DashboardList[i].PrivilegeID"   name="@dashboardName"  @if (@Model.DashboardList[i].GrantedFL == 1)
                                                                                                                                                                     { <text>checked='checked'</text> }>
                                @Model.DashboardList[i].PrivilegeDS
                            </label>
                        </div>
                    </div>
                }
            </div>
        </div>
        
                //Dispatch Screen
        <div class="form-group">
            <div class="row">
                <div class="col-md-12">
                    <div class="checkbox">
                        <label class="control-label">
                            <input type="checkbox" name="chkbxDispatchScreen" id="chkbxDispatchScreen">
                            <b>Dispatch Screen</b>
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row">
                @for (int i = 0; i < Model.DispatchScreen.Count; i++)
                {
                    var dashboardName = "DispatchScreen[" + i + "].PrivilegeID";
                    <div class="col-md-12">
                        <div class="checkbox">
                            <label>
                                @Html.HiddenFor(m => m.DispatchScreen[i].PrivilegeDS)
                                <input type="checkbox" value="@Model.DispatchScreen[i].PrivilegeID" id="@Model.DispatchScreen[i].PrivilegeID"   name="@dashboardName"  @if (@Model.DispatchScreen[i].GrantedFL == 1)
                                                                                                                                                                       { <text>checked='checked'</text> }>
                                @Model.DispatchScreen[i].PrivilegeDS
                            </label>
                        </div>
                    </div>
                }
            </div>
        </div>
                //Prep Screen
        <div class="form-group">
            <div class="row">
                <div class="col-md-12">
                    <div class="checkbox">
                        <label class="control-label">
                            <input type="checkbox" name="chkbxPrepScreen" id="chkbxPrepScreen">
                            <b>Prep Screen</b>
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row">
                @for (int i = 0; i < Model.PrepScreen.Count; i++)
                {
                    var dashboardName = "PrepScreen[" + i + "].PrivilegeID";
                    <div class="col-md-12">
                        <div class="checkbox">
                            <label>
                                @Html.HiddenFor(m => m.PrepScreen[i].PrivilegeDS)
                                <input type="checkbox" value="@Model.PrepScreen[i].PrivilegeID" id="@Model.PrepScreen[i].PrivilegeID"   name="@dashboardName"  @if (@Model.PrepScreen[i].GrantedFL == 1)
                                                                                                                                                               { <text>checked='checked'</text> }>
                                @Model.PrepScreen[i].PrivilegeDS
                            </label>
                        </div>
                    </div>
                }
            </div>
        </div>
        
                //Require Cleaning
        <div class="form-group">
            <div class="row">
                <div class="col-md-12">
                    <div class="checkbox">
                        <label class="control-label">
                            <input type="checkbox" name="chkbxRequireCleaning" id="chkbxRequireCleaning">
                            <b>Require Cleaning</b>
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row">
                @for (int i = 0; i < Model.RequireCleaning.Count; i++)
                {
                    var dashboardName = "RequireCleaning[" + i + "].PrivilegeID";
                    <div class="col-md-12">
                        <div class="checkbox">
                            <label>
                                @Html.HiddenFor(m => m.RequireCleaning[i].PrivilegeDS)
                                <input type="checkbox" value="@Model.RequireCleaning[i].PrivilegeID" id="@Model.RequireCleaning[i].PrivilegeID"   name="@dashboardName"  @if (@Model.RequireCleaning[i].GrantedFL == 1)
                                                                                                                                                                         { <text>checked='checked'</text> }>
                                @Model.RequireCleaning[i].PrivilegeDS
                            </label>
                        </div>
                    </div>
                }
            </div>
        </div>
       
                //Require Service
        <div class="form-group">
            <div class="row">
                <div class="col-md-12">
                    <div class="checkbox">
                        <label class="control-label">
                            <input type="checkbox" name="chkbxRequireService" id="chkbxRequireService">
                            <b>Require Service</b>
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row">
                @for (int i = 0; i < Model.RequireService.Count; i++)
                {
                    var dashboardName = "RequireService[" + i + "].PrivilegeID";
                    <div class="col-md-12">
                        <div class="checkbox">
                            <label>
                                @Html.HiddenFor(m => m.RequireService[i].PrivilegeDS)
                                <input type="checkbox" value="@Model.RequireService[i].PrivilegeID" id="@Model.RequireService[i].PrivilegeID"   name="@dashboardName"  @if (@Model.RequireService[i].GrantedFL == 1)
                                                                                                                                                                       { <text>checked='checked'</text> }>
                                @Model.RequireService[i].PrivilegeDS
                            </label>
                        </div>
                    </div>
                }
            </div>
        </div>
                //Tank Search Screen
        <div class="form-group">
            <div class="row">
                <div class="col-md-12">
                    <div class="checkbox">
                        <label class="control-label">
                            <input type="checkbox" name="chkbxTankSearchScreen" id="chkbxTankSearchScreen">
                            <b>Tank Search Screen</b>
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row">
                @for (int i = 0; i < Model.TankSearchScreen.Count; i++)
                {
                    var dashboardName = "TankSearchScreen[" + i + "].PrivilegeID";
                    <div class="col-md-12">
                        <div class="checkbox">
                            <label>
                                @Html.HiddenFor(m => m.TankSearchScreen[i].PrivilegeDS)
                                <input type="checkbox" value="@Model.TankSearchScreen[i].PrivilegeID" id="@Model.TankSearchScreen[i].PrivilegeID"   name="@dashboardName"  @if (@Model.TankSearchScreen[i].GrantedFL == 1)
                                                                                                                                                                           { <text>checked='checked'</text> }>
                                @Model.TankSearchScreen[i].PrivilegeDS
                            </label>
                        </div>
                    </div>
                }
            </div>
        </div>
                //Tank History Screen
        <div class="form-group">
            <div class="row">
                <div class="col-md-12">
                    <div class="checkbox">
                        <label class="control-label">
                            <input type="checkbox" name="chkbxTankHistoryScreen" id="chkbxTankHistoryScreen">
                            <b>Tank History Screen</b>
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row">
                @for (int i = 0; i < Model.TankHistoryScreen.Count; i++)
                {
                    var dashboardName = "TankHistoryScreen[" + i + "].PrivilegeID";
                    <div class="col-md-12">
                        <div class="checkbox">
                            <label>
                                @Html.HiddenFor(m => m.TankHistoryScreen[i].PrivilegeDS)
                                <input type="checkbox" value="@Model.TankHistoryScreen[i].PrivilegeID" id="@Model.TankHistoryScreen[i].PrivilegeID"   name="@dashboardName"  @if (@Model.TankHistoryScreen[i].GrantedFL == 1)
                                                                                                                                                                             { <text>checked='checked'</text> }>
                                @Model.TankHistoryScreen[i].PrivilegeDS
                            </label>
                        </div>
                    </div>
                }
            </div>
        </div>
                //Grounded Matrix
        <div class="form-group">
            <div class="row">
                <div class="col-md-12">
                    <div class="checkbox">
                        <label class="control-label">
                            <input type="checkbox" name="chkbxGroundedMatrix" id="chkbxGroundedMatrix">
                            <b>Grounded Matrix</b>
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row">
                @for (int i = 0; i < Model.GroundedMatrix.Count; i++)
                {
                    var dashboardName = "GroundedMatrix[" + i + "].PrivilegeID";
                    <div class="col-md-12">
                        <div class="checkbox">
                            <label>
                                @Html.HiddenFor(m => m.GroundedMatrix[i].PrivilegeDS)
                                <input type="checkbox" value="@Model.GroundedMatrix[i].PrivilegeID" id="@Model.GroundedMatrix[i].PrivilegeID"   name="@dashboardName"  @if (@Model.GroundedMatrix[i].GrantedFL == 1)
                                                                                                                                                                       { <text>checked='checked'</text> }>
                                @Model.GroundedMatrix[i].PrivilegeDS
                            </label>
                        </div>
                    </div>
                }
            </div>
        </div>        
                //Reports Menu Options
        <div class="form-group">
            <div class="row">
                <div class="col-md-12">
                    <div class="checkbox">
                        <label class="control-label">
                            <input type="checkbox" name="chkbxReportsMenuOptions" id="chkbxReportsMenuOptions">
                            <b>Reports Menu Options</b>
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row">
                @for (int i = 0; i < Model.ReportsMenuOptions.Count; i++)
                {
                    var dashboardName = "ReportsMenuOptions[" + i + "].PrivilegeID";
                    <div class="col-md-12">
                        <div class="checkbox">
                            <label>
                                @Html.HiddenFor(m => m.ReportsMenuOptions[i].PrivilegeDS)
                                <input type="checkbox" value="@Model.ReportsMenuOptions[i].PrivilegeID" id="@Model.ReportsMenuOptions[i].PrivilegeID"   name="@dashboardName"  @if (@Model.ReportsMenuOptions[i].GrantedFL == 1)
                                                                                                                                                                               { <text>checked='checked'</text> }>
                                @Model.ReportsMenuOptions[i].PrivilegeDS
                            </label>
                        </div>
                    </div>
                }
            </div>
        </div>        
                //Admin Menu Options
        <div class="form-group">
            <div class="row">
                <div class="col-md-12">
                    <div class="checkbox">
                        <label class="control-label">
                            <input type="checkbox" name="chkbxAdminMenuOptions" id="chkbxAdminMenuOptions">
                            <b>Admin Menu Options</b>
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row">
                @for (int i = 0; i < Model.AdminMenuOptions.Count; i++)
                {
                    var dashboardName = "AdminMenuOptions[" + i + "].PrivilegeID";
                    <div class="col-md-12">
                        <div class="checkbox">
                            <label>
                                @Html.HiddenFor(m => m.AdminMenuOptions[i].PrivilegeDS)
                                <input type="checkbox" value="@Model.AdminMenuOptions[i].PrivilegeID" id="@Model.AdminMenuOptions[i].PrivilegeID"   name="@dashboardName"  @if (@Model.AdminMenuOptions[i].GrantedFL == 1)
                                                                                                                                                                           { <text>checked='checked'</text> }>
                                @Model.AdminMenuOptions[i].PrivilegeDS
                            </label>
                        </div>
                    </div>
                }
            </div>
        </div>
                //Product Master
        <div class="form-group">
            <div class="row">
                <div class="col-md-12">
                    <div class="checkbox">
                        <label class="control-label">
                            <input type="checkbox" name="chkbxProductMaster" id="chkbxProductMaster">
                            <b>Product Master</b>
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="row">
                @for (int i = 0; i < Model.ProductMaster.Count; i++)
                {
                    var dashboardName = "ProductMaster[" + i + "].PrivilegeID";
                    <div class="col-md-12">
                        <div class="checkbox">
                            <label>
                                @Html.HiddenFor(m => m.ProductMaster[i].PrivilegeDS)
                                <input type="checkbox" value="@Model.ProductMaster[i].PrivilegeID" id="@Model.ProductMaster[i].PrivilegeID"   name="@dashboardName"  @if (@Model.ProductMaster[i].GrantedFL == 1)
                                                                                                                                                                     { <text>checked='checked'</text> }>
                                @Model.ProductMaster[i].PrivilegeDS
                            </label>
                        </div>
                    </div>
                }
            </div>
        </div>        
        <div class="form-group text-right mt10">
            <input type="submit" value="Save Profile" class="btn btn-default btn-primary mr10" />
            @Html.ActionLink("Return To List", "UserProfile", "Admin", null, new { @class = "btn btn-default btn-primary" })
        </div>
    }

</div>
@section scripts
{
    <script>
        $(function () {

            //DashboardMenu
            $("#chkbxDashboardMenu").click(function () {
                var $checkboxList = $("[name^='DashboardMenu']");
                console.log($(this).is(":checked"));
                if ($(this).is(":checked")) {
                    console.log('inside checked');
                    $checkboxList.prop('checked', this.checked);
                } else {
                    console.log('inside unchecked');
                    $checkboxList.removeAttr("checked");
                }
            });

            //DashboardMenu

            $("#chkbxDashboardList").click(function () {
                var $checkboxList = $("[name^='DashboardList']");
                console.log($(this).is(":checked"));
                if ($(this).is(":checked")) {
                    console.log('inside checked');
                    $checkboxList.prop('checked', this.checked);
                } else {
                    console.log('inside unchecked');
                    $checkboxList.removeAttr("checked");
                }
            });

            //DispatchScreen

            $("#chkbxDispatchScreen").click(function () {
                var $checkboxList = $("[name^='DispatchScreen']");
                console.log($(this).is(":checked"));
                if ($(this).is(":checked")) {
                    console.log('inside checked');
                    $checkboxList.prop('checked', this.checked);
                } else {
                    console.log('inside unchecked');
                    $checkboxList.removeAttr("checked");
                }
            });

            //PrepScreen

            $("#chkbxPrepScreen").click(function () {
                var $checkboxList = $("[name^='PrepScreen']");
                console.log($(this).is(":checked"));
                if ($(this).is(":checked")) {
                    console.log('inside checked');
                    $checkboxList.prop('checked', this.checked);
                } else {
                    console.log('inside unchecked');
                    $checkboxList.removeAttr("checked");
                }
            });

            //RequireCleaning

            $("#chkbxRequireCleaning").click(function () {
                var $checkboxList = $("[name^='RequireCleaning']");
                console.log($(this).is(":checked"));
                if ($(this).is(":checked")) {
                    console.log('inside checked');
                    $checkboxList.prop('checked', this.checked);
                } else {
                    console.log('inside unchecked');
                    $checkboxList.removeAttr("checked");
                }
            });

            //RequireService

            $("#chkbxRequireService").click(function () {
                var $checkboxList = $("[name^='RequireService']");
                console.log($(this).is(":checked"));
                if ($(this).is(":checked")) {
                    console.log('inside checked');
                    $checkboxList.prop('checked', this.checked);
                } else {
                    console.log('inside unchecked');
                    $checkboxList.removeAttr("checked");
                }
            });

            //TankSearchScreen

            $("#chkbxTankSearchScreen").click(function () {
                var $checkboxList = $("[name^='TankSearchScreen']");
                console.log($(this).is(":checked"));
                if ($(this).is(":checked")) {
                    console.log('inside checked');
                    $checkboxList.prop('checked', this.checked);
                } else {
                    console.log('inside unchecked');
                    $checkboxList.removeAttr("checked");
                }
            });

            //TankHistoryScreen

            $("#chkbxTankHistoryScreen").click(function () {
                var $checkboxList = $("[name^='TankHistoryScreen']");
                console.log($(this).is(":checked"));
                if ($(this).is(":checked")) {
                    console.log('inside checked');
                    $checkboxList.prop('checked', this.checked);
                } else {
                    console.log('inside unchecked');
                    $checkboxList.removeAttr("checked");
                }
            });

            //GroundedMatrix

            $("#chkbxGroundedMatrix").click(function () {
                var $checkboxList = $("[name^='GroundedMatrix']");
                console.log($(this).is(":checked"));
                if ($(this).is(":checked")) {
                    console.log('inside checked');
                    $checkboxList.prop('checked', this.checked);
                } else {
                    console.log('inside unchecked');
                    $checkboxList.removeAttr("checked");
                }
            });

            //ReportsMenuOptions

            $("#chkbxReportsMenuOptions").click(function () {
                var $checkboxList = $("[name^='ReportsMenuOptions']");
                console.log($(this).is(":checked"));
                if ($(this).is(":checked")) {
                    console.log('inside checked');
                    $checkboxList.prop('checked', this.checked);
                } else {
                    console.log('inside unchecked');
                    $checkboxList.removeAttr("checked");
                }
            });

            //AdminMenuOptions

            $("#chkbxAdminMenuOptions").click(function () {
                var $checkboxList = $("[name^='AdminMenuOptions']");
                console.log($(this).is(":checked"));
                if ($(this).is(":checked")) {
                    console.log('inside checked');
                    $checkboxList.prop('checked', this.checked);
                } else {
                    console.log('inside unchecked');
                    $checkboxList.removeAttr("checked");
                }
            });

            //AdminMenuOptions

            $("#chkbxProductMaster").click(function () {
                var $checkboxList = $("[name^='ProductMaster']");
                console.log($(this).is(":checked"));
                if ($(this).is(":checked")) {
                    console.log('inside checked');
                    $checkboxList.prop('checked', this.checked);
                } else {
                    console.log('inside unchecked');
                    $checkboxList.removeAttr("checked");
                }
            });


            //mark end of document ready
        });

    </script>
}